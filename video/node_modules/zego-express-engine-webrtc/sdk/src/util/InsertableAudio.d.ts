import type { ZegoLogger } from "zego-express-engine-webrtm";
interface InsertableProcessor {
    bufferSize: number;
    processFn: Function;
    output: Array<number>;
}
export declare class InsertableAudio {
    private _zgp_logger;
    private maxBufferSize;
    track: any;
    tProcessorSource: any;
    tProcessorSourceReader: any;
    waittingQueue: Array<number>;
    private processorNum;
    num: number;
    handleQueue: {
        [index: string]: InsertableProcessor;
    };
    constructor(track: MediaStreamTrack, _zgp_logger: ZegoLogger, maxBufferSize?: number);
    getInsertableStreamTrack(track: MediaStreamTrack): any;
    static get isSupported(): boolean;
    transformHandle(): any;
    getOutputBuffer(input: Float32Array, channel: number, sampleRate: number): Float32Array;
    stopTransformHandle(): Promise<void>;
    createProcessor(key: string, insertableProcessor: InsertableProcessor): void;
    deleteProcessor(key: string): void;
}
export {};
