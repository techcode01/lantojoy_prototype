import { CapabilityDetection, CapabilityDetectionSingle, Constraints, SupportVideoCodeSucCall, ZegoCheckSingleType, ConstraintExtend } from "../common/zego.entity";
export declare function supportVideoCodeType(sucCall: SupportVideoCodeSucCall, checkLevel: 0 | 1, type?: "webRTC" | "VP8" | "H264" | "newWay", customUa?: boolean): Promise<void>;
export declare function supportDetection(screenShotReady: boolean, success: (result: CapabilityDetection | CapabilityDetectionSingle) => void, checkLevel: 0 | 1, type?: ZegoCheckSingleType, customUa?: boolean): Promise<void>;
export declare const WebRTCUtil: {
    supportDetection: typeof supportDetection;
};
export declare function checkScreenParams(screen: Constraints["screen"], errorCallback: Function): boolean;
export declare function checkCameraParams(cameras: {
    width?: number | ConstraintExtend;
    height?: number | ConstraintExtend;
    frameRate?: number | ConstraintExtend;
    bitRate?: number;
}, errorCallback: Function): boolean;
export declare function deleteUndefineByQuality(options: any): any;
export declare function base64ToUint8Array(base64String: string): Uint8Array;
export declare function decodeString(u8arr: Uint8Array): string;
export declare function encodeString(str: string): Uint8Array;
export declare function supplementPBInfo(body: any): void;
export declare function getCandidate(sdp: string): [candidates: any[], candidateStrs: string[]];
